#include <iostream>
#include "RLECompression.hpp"
#include "Huffman.hpp"

int main() {
    std::vector<int> input = {1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5};

    // Create an instance of RunLengthEncoding
    RLECompression rle;

    // Call compressData method
    std::vector<std::pair<int, int>> compressed = rle.compressData(input);

    // Print compressed data
    rle.printCompressedData();

    // Call getCompressedData method
    std::vector<std::pair<int, int>> pairs = rle.getCompressedData();
/*
    // Print retrieved data
    std::cout << "Retrieved data: ";
    for (const auto& p : retrievedData) {
        std::cout << "(" << p.first << ", " << p.second << ") ";
    }
    std::cout << std::endl;
    
    std::vector<std::pair<int, int>> pairs = {{1, 1}, {2, 2}, {2, 2}, {3, 3}, {3, 3}, {3, 3}, {4, 4}, {4, 4}, {4, 4}, {4, 4}, {5, 5}, {5, 5}, {5, 5}, {5, 5}, {5, 5}, {6, 6},
    {6, 6}, {6, 6}, {6, 6}, {6, 6}, {6, 6}, {7, 7}, {7, 7}, {7, 7}, {7, 7}, {7, 7}, {7, 7}, {7, 7}, {8, 8}, {8, 8}, {8, 8}, {8, 8}, {8, 8}, {8, 8}, {8, 8}, {8, 8}, {9, 9},
    {9, 9}, {9, 9}, {9, 9}, {9, 9}, {9, 9}, {9, 9}, {9, 9}, {9, 9}, {10, 10}, {10, 10}, {10, 10}, {10, 10}, {10, 10}, {10, 10}, {10, 10}, {10, 10}, {10, 10}, {10, 10},
    {11, 11}, {11, 11}, {11, 11}, {11, 11}, {11, 11}, {11, 11}, {11, 11}, {11, 11}, {11, 11}, {11, 11}, {11, 11}, {12, 12}, {12, 12}, {12, 12}, {12, 12}, {12, 12}, {12, 12}, 
    {12, 12}, {12, 12}, {12, 12}, {12, 12}, {12, 12}, {12, 12}, {13, 13}, {13, 13}, {13, 13}, {13, 13}, {13, 13}, {13, 13}, {13, 13}, {13, 13}, {13, 13}, {13, 13}, {13, 13},
    {13, 13}, {13, 13}, {14, 14}, {14, 14}, {14, 14}, {14, 14}, {14, 14}, {14, 14}, {14, 14}, {14, 14}, {14, 14}, {14, 14}, {14, 14}, {14, 14}, {14, 14}, {14, 14}, {15, 15},
    {15, 15}, {15, 15}, {15, 15}, {15, 15}, {15, 15}, {15, 15}, {15, 15}, {15, 15}, {15, 15}, {15, 15}, {15, 15}, {15, 15}, {15, 15}, {15, 15}, {16, 16}, {16, 16}, {16, 16},
    {16, 16}, {16, 16}, {16, 16}, {16, 16}, {16, 16}, {16, 16}, {16, 16}, {16, 16}, {16, 16}, {16, 16}, {16, 16}, {16, 16}, {16, 16}, {17, 17}, {17, 17}, {17, 17}, {17, 17},
    {17, 17}, {17, 17}, {17, 17}, {17, 17}, {17, 17}, {17, 17}, {17, 17}, {17, 17}, {17, 17}, {17, 17}, {17, 17}, {17, 17}, {17, 17}, {18, 18}, {18, 18}, {18, 18}, {18, 18},
    {18, 18}, {18, 18}, {18, 18}, {18, 18}, {18, 18}, {18, 18}, {18, 18}, {18, 18}, {18, 18}, {18, 18}, {18, 18}, {18, 18}, {18, 18}, {18, 18}, {19, 19}, {19, 19}, {19, 19},
    {19, 19}, {19, 19}, {19, 19}, {19, 19}, {19, 19}, {19, 19}, {19, 19}, {19, 19}, {19, 19}, {19, 19}, {19, 19}, {19, 19}, {19, 19}, {19, 19}, {19, 19}, {19, 19}, {20, 20},
    {20, 20}, {20, 20}, {20, 20}, {20, 20}, {20, 20}, {20, 20}, {20, 20}, {20, 20}, {20, 20}, {20, 20}, {20, 20}, {20, 20}, {20, 20}, {20, 20}, {20, 20}, {20, 20}, {20, 20},
    {20, 20}, {20, 20}};
    */
    auto root = buildHuffmanTree(pairs);

    std::unordered_map<std::pair<int, int>, std::string, PairHash, PairEqual> codes;

    generateHuffmanCodes(root, codes);

    for (const auto& pair : codes) {
        std::cout << "(" << pair.first.first << ", " << pair.first.second << ") : " << pair.second << std::endl;
    }



    return 0;
}
